### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.mgmt.datafactory.models.TabularTranslator
  fullName: azure.mgmt.datafactory.models.TabularTranslator
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: msrest.serialization.Model
    type: azure.mgmt.datafactory.models.copy_translator_py3.CopyTranslator
  langs:
  - python
  module: azure.mgmt.datafactory.models
  name: TabularTranslator
  source:
    id: TabularTranslator
    path: azure-mgmt-datafactory\azure\mgmt\datafactory\models\tabular_translator_py3.py
    remote:
      branch: master
      path: azure-mgmt-datafactory\azure\mgmt\datafactory\models\tabular_translator_py3.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 15
  summary: 'A copy activity tabular translator.


    All required parameters must be populated in order to send to Azure.'
  syntax:
    content: TabularTranslator(*, additional_properties=None, column_mappings=None,
      schema_mapping=None, **kwargs) -> None
    parameters:
    - description: 'Unmatched properties from the message are

        deserialized this collection'
      id: additional_properties
      type:
      - dict[str, object]
    - description: Required. Constant filled by server.
      id: type
      type:
      - str
    - description: 'Column mappings. Example: "UserId: MyUserId,

        Group: MyGroup, Name: MyName" Type: string (or Expression with resultType

        string).'
      id: column_mappings
      type:
      - object
    - description: 'The schema mapping to map between tabular data and

        hierarchical data. Example: {"Column1": "$.Column1", "Column2":

        "$.Column2.Property1", "Column3": "$.Column2.Property2"}. Type: object (or

        Expression with resultType object).'
      id: schema_mapping
      type:
      - object
  type: class
  uid: azure.mgmt.datafactory.models.TabularTranslator
references:
- fullName: dict[str, object]
  name: dict[str, object]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: object
    name: object
    uid: object
  - fullName: ']'
    name: ']'
  uid: dict[str, object]
