### YamlMime:UniversalReference
api_name: []
items:
- children:
  - uamqp.client.AMQPClient.close
  - uamqp.client.AMQPClient.do_work
  - uamqp.client.AMQPClient.mgmt_request
  - uamqp.client.AMQPClient.open
  class: uamqp.client.AMQPClient
  fullName: uamqp.client.AMQPClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: uamqp.client
  name: AMQPClient
  summary: 'An AMQP client.





    '
  syntax:
    content: AMQPClient(remote_address, auth=None, client_name=None, debug=False,
      error_policy=None, keep_alive_interval=None, **kwargs)
    parameters:
    - description: 'The AMQP endpoint to connect to. This could be a send target

        or a receive source.

        '
      id: remote_address
      type:
      - str, bytes
      - uamqp.address.Address
    - description: "Authentication for the connection. This should be one of the subclasses\
        \ of\nuamqp.authentication.AMQPAuth. Currently this includes:\n\n   * uamqp.authentication.SASLAnonymous\
        \ \n\n   * uamqp.authentication.SASLPlain \n\n   * uamqp.authentication.SASTokenAuth\
        \ \n\nIf no authentication is supplied, SASLAnnoymous will be used by default.\n"
      id: auth
      type:
      - uamqp.authentication.common.AMQPAuth
    - description: 'The name for the client, also known as the Container ID.

        If no name is provided, a random GUID will be used.

        '
      id: client_name
      type:
      - str
      - bytes
    - description: 'Whether to turn on network trace logs. If *True*, trace logs

        will be logged at INFO level. Default is *False*.

        '
      id: debug
      type:
      - bool
    - description: 'A policy for parsing errors on link, connection and message

        disposition to determine whether the error should be retryable.

        '
      id: error_policy
      type:
      - uamqp.errors.ErrorPolicy
    - description: 'If set, a thread will be started to keep the connection

        alive during periods of user inactivity. The value will determine how long
        the

        thread will sleep (in seconds) between pinging the connection. If 0 or None,
        no

        thread will be started.

        '
      id: keep_alive_interval
      type:
      - int
    - description: 'Maximum AMQP frame size. Default is 63488 bytes.

        '
      id: max_frame_size
      type:
      - int
    - description: 'Maximum number of Session channels in the Connection.

        '
      id: channel_max
      type:
      - int
    - description: 'Timeout in milliseconds after which the Connection will close

        if there is no further activity.

        '
      id: idle_timeout
      type:
      - int
    - description: 'Connection properties.

        '
      id: properties
      type:
      - dict
    - description: 'Ratio of empty frames to

        idle time for Connections with no activity. Value must be between

        0.0 and 1.0 inclusive. Default is 0.5.

        '
      id: remote_idle_timeout_empty_frame_send_ratio
      type:
      - float
    - description: 'The size of the allowed window for incoming messages.

        '
      id: incoming_window
      type:
      - int
    - description: 'The size of the allowed window for outgoing messages.

        '
      id: outgoing_window
      type:
      - int
    - description: 'The maximum number of concurrent link handles.

        '
      id: handle_max
      type:
      - int
    - description: 'The encoding to use for parameters supplied as strings.

        Default is ''UTF-8''

        '
      id: encoding
      type:
      - str
  type: class
  uid: uamqp.client.AMQPClient
- class: uamqp.client.AMQPClient
  fullName: uamqp.client.AMQPClient.close
  langs:
  - python
  module: uamqp.client
  name: close
  summary: 'Close the client. This includes closing the Session

    and CBS authentication layer as well as the Connection.

    If the client was opened using an external Connection,

    this will be left intact.

    '
  syntax:
    content: close()
    parameters: []
  type: method
  uid: uamqp.client.AMQPClient.close
- class: uamqp.client.AMQPClient
  fullName: uamqp.client.AMQPClient.do_work
  langs:
  - python
  module: uamqp.client
  name: do_work
  summary: 'Run a single connection iteration.

    This will return *True* if the connection is still open

    and ready to be used for further work, or *False* if it needs

    to be shut down.

    '
  syntax:
    content: do_work()
    parameters: []
    return:
      type:
      - bool
  type: method
  uid: uamqp.client.AMQPClient.do_work
- class: uamqp.client.AMQPClient
  fullName: uamqp.client.AMQPClient.mgmt_request
  langs:
  - python
  module: uamqp.client
  name: mgmt_request
  summary: 'Run a request/response operation. These are frequently used for management

    tasks against a $management node, however any node name can be specified

    and the available options will depend on the target service.

    '
  syntax:
    content: mgmt_request(message, operation, op_type=None, node=None, **kwargs)
    parameters:
    - description: 'The message to send in the management request.

        '
      id: message
      type:
      - uamqp.message.Message
    - description: 'The type of operation to be performed. This value will

        be service-specific, but common values include READ, CREATE and UPDATE.

        This value will be added as an application property on the message.

        '
      id: operation
      type:
      - bytes
    - defaultValue: None
      description: 'The type on which to carry out the operation. This will

        be specific to the entities of the service. This value will be added as

        an application property on the message.

        '
      id: op_type
      type:
      - bytes
    - defaultValue: None
      description: 'The target node. Default is *b"$management"*.

        '
      id: node
      type:
      - bytes
    - description: 'Provide an optional timeout in milliseconds within which a response

        to the management request must be received.

        '
      id: timeout
      type:
      - int
    - description: 'Provide an alternate name for the status code in the

        response body which can vary between services due to the spec still being
        in draft.

        The default is *b"statusCode"*.

        '
      id: status_code_field
      type:
      - bytes
    - description: 'Provide an alternate name for the description in the

        response body which can vary between services due to the spec still being
        in draft.

        The default is *b"statusDescription"*.

        '
      id: description_fields
      type:
      - bytes
    return:
      type:
      - uamqp.message.Message
  type: method
  uid: uamqp.client.AMQPClient.mgmt_request
- class: uamqp.client.AMQPClient
  fullName: uamqp.client.AMQPClient.open
  langs:
  - python
  module: uamqp.client
  name: open
  summary: 'Open the client. The client can create a new Connection

    or an existing Connection can be passed in. This existing Connection

    may have an existing CBS authentication Session, which will be

    used for this client as well. Otherwise a new Session will be

    created.

    '
  syntax:
    content: open(connection=None)
    parameters:
    - defaultValue: None
      description: 'An existing Connection that may be shared between

        multiple clients.

        '
      id: connection
  type: method
  uid: uamqp.client.AMQPClient.open
references:
- fullName: uamqp.client.AMQPClient.close
  isExternal: false
  name: close
  parent: uamqp.client.AMQPClient
  uid: uamqp.client.AMQPClient.close
- fullName: uamqp.client.AMQPClient.do_work
  isExternal: false
  name: do_work
  parent: uamqp.client.AMQPClient
  uid: uamqp.client.AMQPClient.do_work
- fullName: uamqp.client.AMQPClient.mgmt_request
  isExternal: false
  name: mgmt_request
  parent: uamqp.client.AMQPClient
  uid: uamqp.client.AMQPClient.mgmt_request
- fullName: uamqp.client.AMQPClient.open
  isExternal: false
  name: open
  parent: uamqp.client.AMQPClient
  uid: uamqp.client.AMQPClient.open
- fullName: str, bytes
  name: str, bytes
  spec.python:
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: bytes
    name: bytes
    uid: bytes
  uid: str, bytes
