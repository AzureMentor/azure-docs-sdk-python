### YamlMime:UniversalReference
api_name: []
items:
- children:
  - pathtools.patterns.match_path
  - pathtools.patterns.match_path_against
  - pathtools.patterns.match_any_paths
  - pathtools.patterns.filter_paths
  - pathtools.patterns.match_path
  - pathtools.patterns.match_path_against
  - pathtools.patterns.filter_paths
  fullName: pathtools.patterns
  langs:
  - python
  module: pathtools.patterns
  name: patterns
  source:
    id: patterns
    path: pathtools\patterns.py
    remote:
      branch: HEAD
      path: pathtools\patterns.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 0
  summary: ':module: pathtools.patterns

    :synopsis: Wildcard pattern matching and filtering functions for paths.

    :author: Yesudeep Mangalapilly <yesudeep@gmail.com>



    Functions

    ---------

    .. autofunction:: match_path

    .. autofunction:: match_path_against

    .. autofunction:: filter_paths

    '
  type: module
  uid: pathtools.patterns
- fullName: pathtools.patterns.match_path
  langs:
  - python
  module: pathtools.patterns
  name: match_path
  source:
    id: match_path
    path: pathtools\patterns.py
    remote:
      branch: HEAD
      path: pathtools\patterns.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 131
  summary: "Matches a pathname against a set of acceptable and ignored patterns.\n\
    \nDoctests::\n\n   ```\n\n   >>> match_path(\"/Users/gorakhargosh/foobar.py\"\
    )\n   True\n   >>> match_path(\"/Users/gorakhargosh/foobar.py\", case_sensitive=False)\n\
    \   True\n   >>> match_path(\"/users/gorakhargosh/foobar.py\", [\"*.py\"], [\"\
    *.PY\"], True)\n   True\n   >>> match_path(\"/users/gorakhargosh/FOOBAR.PY\",\
    \ [\"*.py\"], [\"*.PY\"], True)\n   False\n   >>> match_path(\"/users/gorakhargosh/foobar/\"\
    , [\"*.py\"], [\"*.txt\"], False)\n   False\n   >>> match_path(\"/users/gorakhargosh/FOOBAR.PY\"\
    , [\"*.py\"], [\"*.PY\"], False)\n   Traceback (most recent call last):\n    \
    \   ...\n   ValueError: conflicting patterns `set(['*.py'])` included and excluded\n\
    \   ```\n"
  syntax:
    content: match_path(pathname, included_patterns=None, excluded_patterns=None,
      case_sensitive=True)
    parameters:
    - description: 'A pathname which will be matched against a pattern.

        '
      id: pathname
    - defaultValue: None
      description: 'Allow filenames matching wildcard patterns specified in this list.

        If no pattern is specified, the function treats the pathname as

        a match_path.

        '
      id: included_patterns
    - defaultValue: None
      description: 'Ignores filenames matching wildcard patterns specified in this
        list.

        If no pattern is specified, the function treats the pathname as

        a match_path.

        '
      id: excluded_patterns
    - defaultValue: 'True'
      description: '`True` if matching should be case-sensitive; `False` otherwise.

        '
      id: case_sensitive
    return: &id001
      description: '`True` if the pathname matches; `False` otherwise.

        '
  type: function
  uid: pathtools.patterns.match_path
- fullName: pathtools.patterns.match_path_against
  langs:
  - python
  module: pathtools.patterns
  name: match_path_against
  source:
    id: match_path_against
    path: pathtools\patterns.py
    remote:
      branch: HEAD
      path: pathtools\patterns.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 58
  summary: "Determines whether the pathname matches any of the given wildcard patterns,\n\
    optionally ignoring the case of the pathname and patterns.\n\nDoctests::\n\n \
    \  ```\n\n   >>> match_path_against(\"/home/username/foobar/blah.py\", [\"*.py\"\
    , \"*.txt\"], False)\n   True\n   >>> match_path_against(\"/home/username/foobar/blah.py\"\
    , [\"*.PY\", \"*.txt\"], True)\n   False\n   >>> match_path_against(\"/home/username/foobar/blah.py\"\
    , [\"*.PY\", \"*.txt\"], False)\n   True\n   >>> match_path_against(\"C:\\windows\\\
    blah\\BLAH.PY\", [\"*.py\", \"*.txt\"], True)\n   False\n   >>> match_path_against(\"\
    C:\\windows\\blah\\BLAH.PY\", [\"*.py\", \"*.txt\"], False)\n   True\n   ```\n"
  syntax:
    content: match_path_against(pathname, patterns, case_sensitive=True)
    parameters:
    - description: 'A path name that will be matched against a wildcard pattern.

        '
      id: pathname
    - description: 'A list of wildcard patterns to match_path the filename against.

        '
      id: patterns
    - defaultValue: 'True'
      description: '`True` if the matching should be case-sensitive; `False` otherwise.

        '
      id: case_sensitive
    return: &id002
      description: '`True` if the pattern matches; `False` otherwise.

        '
  type: function
  uid: pathtools.patterns.match_path_against
- fullName: pathtools.patterns.match_any_paths
  langs:
  - python
  module: pathtools.patterns
  name: match_any_paths
  source:
    id: match_any_paths
    path: pathtools\patterns.py
    remote:
      branch: HEAD
      path: pathtools\patterns.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 220
  summary: "Matches from a set of paths based on acceptable patterns and\nignorable\
    \ patterns.\n\nDoctests::\n\n   ```\n\n   >>> pathnames = set([\"/users/gorakhargosh/foobar.py\"\
    , \"/var/cache/pdnsd.status\", \"/etc/pdnsd.conf\", \"/usr/local/bin/python\"\
    ])\n   >>> match_any_paths(pathnames)\n   True\n   >>> match_any_paths(pathnames,\
    \ case_sensitive=False)\n   True\n   >>> match_any_paths(pathnames, [\"*.py\"\
    , \"*.conf\"], [\"*.status\"], case_sensitive=True)\n   True\n   >>> match_any_paths(pathnames,\
    \ [\"*.txt\"], case_sensitive=False)\n   False\n   >>> match_any_paths(pathnames,\
    \ [\"*.txt\"], case_sensitive=True)\n   False\n   ```\n"
  syntax:
    content: match_any_paths(pathnames, included_patterns=None, excluded_patterns=None,
      case_sensitive=True)
    parameters:
    - description: 'A list of path names that will be filtered based on matching and

        ignored patterns.

        '
      id: pathnames
    - defaultValue: None
      description: 'Allow filenames matching wildcard patterns specified in this list.

        If no pattern list is specified, ["*"] is used as the default pattern,

        which matches all files.

        '
      id: included_patterns
    - defaultValue: None
      description: 'Ignores filenames matching wildcard patterns specified in this
        list.

        If no pattern list is specified, no files are ignored.

        '
      id: excluded_patterns
    - defaultValue: 'True'
      description: '`True` if matching should be case-sensitive; `False` otherwise.

        '
      id: case_sensitive
    return:
      description: '`True` if any of the paths matches; `False` otherwise.

        '
  type: function
  uid: pathtools.patterns.match_any_paths
- fullName: pathtools.patterns.filter_paths
  langs:
  - python
  module: pathtools.patterns
  name: filter_paths
  source:
    id: filter_paths
    path: pathtools\patterns.py
    remote:
      branch: HEAD
      path: pathtools\patterns.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 177
  summary: "Filters from a set of paths based on acceptable patterns and\nignorable\
    \ patterns.\n\nDoctests::\n\n   ```\n\n   >>> pathnames = set([\"/users/gorakhargosh/foobar.py\"\
    , \"/var/cache/pdnsd.status\", \"/etc/pdnsd.conf\", \"/usr/local/bin/python\"\
    ])\n   >>> set(filter_paths(pathnames)) == pathnames\n   True\n   >>> set(filter_paths(pathnames,\
    \ case_sensitive=False)) == pathnames\n   True\n   >>> set(filter_paths(pathnames,\
    \ [\"*.py\", \"*.conf\"], [\"*.status\"], case_sensitive=True)) == set([\"/users/gorakhargosh/foobar.py\"\
    , \"/etc/pdnsd.conf\"])\n   True\n   ```\n"
  syntax:
    content: filter_paths(pathnames, included_patterns=None, excluded_patterns=None,
      case_sensitive=True)
    parameters:
    - description: 'A list of path names that will be filtered based on matching and

        ignored patterns.

        '
      id: pathnames
    - defaultValue: None
      description: 'Allow filenames matching wildcard patterns specified in this list.

        If no pattern list is specified, ["*"] is used as the default pattern,

        which matches all files.

        '
      id: included_patterns
    - defaultValue: None
      description: 'Ignores filenames matching wildcard patterns specified in this
        list.

        If no pattern list is specified, no files are ignored.

        '
      id: excluded_patterns
    - defaultValue: 'True'
      description: '`True` if matching should be case-sensitive; `False` otherwise.

        '
      id: case_sensitive
    return: &id003
      description: 'A list of pathnames that matched the allowable patterns and passed

        through the ignored patterns.

        '
  type: function
  uid: pathtools.patterns.filter_paths
- fullName: pathtools.patterns.match_path
  langs:
  - python
  module: pathtools.patterns
  name: match_path
  source:
    id: match_path
    path: pathtools\patterns.py
    remote:
      branch: HEAD
      path: pathtools\patterns.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 131
  summary: "Matches a pathname against a set of acceptable and ignored patterns.\n\
    \nDoctests::\n\n   ```\n\n   >>> match_path(\"/Users/gorakhargosh/foobar.py\"\
    )\n   True\n   >>> match_path(\"/Users/gorakhargosh/foobar.py\", case_sensitive=False)\n\
    \   True\n   >>> match_path(\"/users/gorakhargosh/foobar.py\", [\"*.py\"], [\"\
    *.PY\"], True)\n   True\n   >>> match_path(\"/users/gorakhargosh/FOOBAR.PY\",\
    \ [\"*.py\"], [\"*.PY\"], True)\n   False\n   >>> match_path(\"/users/gorakhargosh/foobar/\"\
    , [\"*.py\"], [\"*.txt\"], False)\n   False\n   >>> match_path(\"/users/gorakhargosh/FOOBAR.PY\"\
    , [\"*.py\"], [\"*.PY\"], False)\n   Traceback (most recent call last):\n    \
    \   ...\n   ValueError: conflicting patterns `set(['*.py'])` included and excluded\n\
    \   ```\n"
  syntax:
    content: match_path(pathname, included_patterns=None, excluded_patterns=None,
      case_sensitive=True)
    parameters:
    - description: 'A pathname which will be matched against a pattern.

        '
      id: pathname
    - defaultValue: None
      description: 'Allow filenames matching wildcard patterns specified in this list.

        If no pattern is specified, the function treats the pathname as

        a match_path.

        '
      id: included_patterns
    - defaultValue: None
      description: 'Ignores filenames matching wildcard patterns specified in this
        list.

        If no pattern is specified, the function treats the pathname as

        a match_path.

        '
      id: excluded_patterns
    - defaultValue: 'True'
      description: '`True` if matching should be case-sensitive; `False` otherwise.

        '
      id: case_sensitive
    return: *id001
  type: function
  uid: pathtools.patterns.match_path
- fullName: pathtools.patterns.match_path_against
  langs:
  - python
  module: pathtools.patterns
  name: match_path_against
  source:
    id: match_path_against
    path: pathtools\patterns.py
    remote:
      branch: HEAD
      path: pathtools\patterns.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 58
  summary: "Determines whether the pathname matches any of the given wildcard patterns,\n\
    optionally ignoring the case of the pathname and patterns.\n\nDoctests::\n\n \
    \  ```\n\n   >>> match_path_against(\"/home/username/foobar/blah.py\", [\"*.py\"\
    , \"*.txt\"], False)\n   True\n   >>> match_path_against(\"/home/username/foobar/blah.py\"\
    , [\"*.PY\", \"*.txt\"], True)\n   False\n   >>> match_path_against(\"/home/username/foobar/blah.py\"\
    , [\"*.PY\", \"*.txt\"], False)\n   True\n   >>> match_path_against(\"C:\\windows\\\
    blah\\BLAH.PY\", [\"*.py\", \"*.txt\"], True)\n   False\n   >>> match_path_against(\"\
    C:\\windows\\blah\\BLAH.PY\", [\"*.py\", \"*.txt\"], False)\n   True\n   ```\n"
  syntax:
    content: match_path_against(pathname, patterns, case_sensitive=True)
    parameters:
    - description: 'A path name that will be matched against a wildcard pattern.

        '
      id: pathname
    - description: 'A list of wildcard patterns to match_path the filename against.

        '
      id: patterns
    - defaultValue: 'True'
      description: '`True` if the matching should be case-sensitive; `False` otherwise.

        '
      id: case_sensitive
    return: *id002
  type: function
  uid: pathtools.patterns.match_path_against
- fullName: pathtools.patterns.filter_paths
  langs:
  - python
  module: pathtools.patterns
  name: filter_paths
  source:
    id: filter_paths
    path: pathtools\patterns.py
    remote:
      branch: HEAD
      path: pathtools\patterns.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 177
  summary: "Filters from a set of paths based on acceptable patterns and\nignorable\
    \ patterns.\n\nDoctests::\n\n   ```\n\n   >>> pathnames = set([\"/users/gorakhargosh/foobar.py\"\
    , \"/var/cache/pdnsd.status\", \"/etc/pdnsd.conf\", \"/usr/local/bin/python\"\
    ])\n   >>> set(filter_paths(pathnames)) == pathnames\n   True\n   >>> set(filter_paths(pathnames,\
    \ case_sensitive=False)) == pathnames\n   True\n   >>> set(filter_paths(pathnames,\
    \ [\"*.py\", \"*.conf\"], [\"*.status\"], case_sensitive=True)) == set([\"/users/gorakhargosh/foobar.py\"\
    , \"/etc/pdnsd.conf\"])\n   True\n   ```\n"
  syntax:
    content: filter_paths(pathnames, included_patterns=None, excluded_patterns=None,
      case_sensitive=True)
    parameters:
    - description: 'A list of path names that will be filtered based on matching and

        ignored patterns.

        '
      id: pathnames
    - defaultValue: None
      description: 'Allow filenames matching wildcard patterns specified in this list.

        If no pattern list is specified, ["*"] is used as the default pattern,

        which matches all files.

        '
      id: included_patterns
    - defaultValue: None
      description: 'Ignores filenames matching wildcard patterns specified in this
        list.

        If no pattern list is specified, no files are ignored.

        '
      id: excluded_patterns
    - defaultValue: 'True'
      description: '`True` if matching should be case-sensitive; `False` otherwise.

        '
      id: case_sensitive
    return: *id003
  type: function
  uid: pathtools.patterns.filter_paths
references:
- fullName: pathtools.patterns.match_path
  isExternal: false
  name: match_path
  parent: pathtools.patterns
  uid: pathtools.patterns.match_path
- fullName: pathtools.patterns.match_path_against
  isExternal: false
  name: match_path_against
  parent: pathtools.patterns
  uid: pathtools.patterns.match_path_against
- fullName: pathtools.patterns.match_any_paths
  isExternal: false
  name: match_any_paths
  parent: pathtools.patterns
  uid: pathtools.patterns.match_any_paths
- fullName: pathtools.patterns.filter_paths
  isExternal: false
  name: filter_paths
  parent: pathtools.patterns
  uid: pathtools.patterns.filter_paths
- fullName: pathtools.patterns.match_path
  isExternal: false
  name: match_path
  parent: pathtools.patterns
  uid: pathtools.patterns.match_path
- fullName: pathtools.patterns.match_path_against
  isExternal: false
  name: match_path_against
  parent: pathtools.patterns
  uid: pathtools.patterns.match_path_against
- fullName: pathtools.patterns.filter_paths
  isExternal: false
  name: filter_paths
  parent: pathtools.patterns
  uid: pathtools.patterns.filter_paths
